generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://formflow_owner:JavaScript%4099@ep-holy-glade-a52vfij3.us-east-2.aws.neon.tech/formflow?sslmode=require"
}

model User {
  id           Int        @id @default(autoincrement())
  name         String
  email        String     @unique
  passwordHash String
  createdAt    DateTime   @default(now())
  userPlans    UserPlan[]
  feedbackForms FeedbackForm[] 
}

model Plan {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  price           Float
  formLimit       Int
  submissionLimit Int
  downloadLimit   Int
  userPlans       UserPlan[]
}

model UserPlan {
  id         Int       @id @default(autoincrement())
  userId     Int
  planId     Int
  startDate  DateTime  @default(now())
  expiryDate DateTime?
  plan       Plan      @relation(fields: [planId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@unique([userId, planId])
}

model OTP {
  id         Int      @id @default(autoincrement())
  email      String
  otpCode    String
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  isVerified Boolean  @default(false)
}


model FeedbackForm {
   id          Int          @id @default(autoincrement())
  title       String
  description String
  isPublished Boolean      @default(false)
  createdAt   DateTime     @default(now())
  fields      Field[]      
  condition   Condition?   
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  submissions Submission[]

  @@index([userId])
}

model Field {
  id           Int      @id @default(autoincrement())
  label        String
  type         String
  required     Boolean
  errorMessage String?
  options      String[]  // Assuming this will hold multiple options if the field is select, checkbox, etc.
  category     String[]
  formId       Int @unique
  form         FeedbackForm @relation(fields: [formId], references: [id])
}

model Condition {
  id       Int        @id @default(autoincrement())
  url      String?
  date     DateTime?
  time     String?
  formId   Int @unique
  form     FeedbackForm @relation(fields: [formId], references: [id])
}

model Submission {
  id          Int          @id @default(autoincrement())
  submitted   DateTime     @default(now())
  views       Int          @default(0)
  feedbackList FeedbackList[]
  formId      Int
  form        FeedbackForm @relation(fields: [formId], references: [id])

  @@index([formId])
}


model FeedbackList {
  id          Int      @id @default(autoincrement())
  submittedDate DateTime @default(now())
  content     Content[]
  submissionId Int
  submission  Submission  @relation(fields: [submissionId], references: [id])
}

model Content {
  id           Int    @id @default(autoincrement())
  question     String
  answer       String
  feedbackListId Int
  feedbackList FeedbackList @relation(fields: [feedbackListId], references: [id])
}
